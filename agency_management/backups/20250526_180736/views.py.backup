# agency/views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Sum, Count
from django.core.management import call_command
from django.conf import settings
from .models import Company, Client, Project, MonthlyRevenue, UserProfile, ProjectAllocation
from datetime import datetime
from decimal import Decimal
import os

@login_required
def dashboard(request):
    """Main dashboard view"""
    # Get the first company (we'll improve this later)
    company = Company.objects.first()
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    # Basic metrics
    total_clients = Client.objects.filter(company=company, status='active').count()
    total_projects = Project.objects.filter(company=company).count()
    total_team_members = UserProfile.objects.filter(company=company, status='full_time').count()
    
    # Current month revenue
    current_revenue = MonthlyRevenue.objects.filter(
        company=company,
        year=current_year,
        month=current_month,
        revenue_type='booked'
    ).aggregate(total=Sum('revenue'))['total'] or Decimal('0')
    
    context = {
        'company': company,
        'total_clients': total_clients,
        'total_projects': total_projects,
        'total_team_members': total_team_members,
        'current_revenue': current_revenue,
        'current_year': current_year,
        'current_month': current_month,
    }
    
    return render(request, 'dashboard.html', context)

def clients_list(request):
    """List all clients"""
    company = Company.objects.first()
    clients = Client.objects.filter(company=company).order_by('name')
    
    context = {
        'clients': clients,
        'company': company,
    }
    
    return render(request, 'clients/list.html', context)

def projects_list(request):
    """List all projects"""
    company = Company.objects.first()
    projects = Project.objects.filter(company=company).select_related('client').order_by('-created_at')
    
    context = {
        'projects': projects,
        'company': company,
    }
    
    return render(request, 'projects/list.html', context)

def team_list(request):
    """List all team members"""
    company = Company.objects.first()
    team_members = UserProfile.objects.filter(company=company).select_related('user').order_by('user__last_name')
    
    context = {
        'team_members': team_members,
        'company': company,
    }
    
    return render(request, 'team/list.html', context)

def capacity_dashboard(request):
    """Capacity planning dashboard"""
    company = Company.objects.first()
    
    # Calculate current month utilization
    current_year = datetime.now().year
    current_month = datetime.now().month
    
    # Get team capacity
    team_members = UserProfile.objects.filter(company=company, status='full_time')
    total_capacity = sum(
        float(profile.weekly_capacity_hours) * 4.33 
        for profile in team_members
    )
    
    # Get current allocations
    current_allocations = ProjectAllocation.objects.filter(
        project__company=company,
        year=current_year,
        month=current_month
    ).aggregate(total=Sum('allocated_hours'))['total'] or 0
    
    utilization_rate = (float(current_allocations) / total_capacity * 100) if total_capacity > 0 else 0
    
    context = {
        'company': company,
        'total_capacity': total_capacity,
        'current_allocations': current_allocations,
        'utilization_rate': utilization_rate,
        'team_members': team_members,
    }
    
    return render(request, 'capacity.html', context)

@staff_member_required
def import_data(request):
    """Import data from spreadsheet"""
    if request.method == 'POST':
        # This is a simple version - in production you'd handle file uploads
        file_path = request.POST.get('file_path')
        company_code = request.POST.get('company_code', 'G+')
        
        if file_path and os.path.exists(file_path):
            try:
                # Call the management command
                call_command('import_spreadsheet', file_path, company_code)
                messages.success(request, f'Successfully imported data from {file_path}')
            except Exception as e:
                messages.error(request, f'Import failed: {str(e)}')
        else:
            messages.error(request, 'File path not found')
        
        return redirect('agency:dashboard')
    
    context = {
        'title': 'Import Spreadsheet Data'
    }
    return render(request, 'import_data.html', context)

@login_required
def revenue_chart_data(request):
    """API endpoint for revenue chart data"""
    company = Company.objects.first()
    year = int(request.GET.get('year', datetime.now().year))
    
    # Get monthly revenue data
    revenues = MonthlyRevenue.objects.filter(
        company=company,
        year=year
    ).values('month', 'revenue_type').annotate(
        total=Sum('revenue')
    ).order_by('month', 'revenue_type')
    
    # Format data for chart
    monthly_data = {}
    for month in range(1, 13):
        monthly_data[month] = {'booked': 0, 'forecast': 0}
    
    for revenue in revenues:
        month = revenue['month']
        revenue_type = revenue['revenue_type']
        total = float(revenue['total'])
        monthly_data[month][revenue_type] = total
    
    # Convert to lists for chart
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    booked_data = [monthly_data[i+1]['booked'] for i in range(12)]
    forecast_data = [monthly_data[i+1]['forecast'] for i in range(12)]
    
    return JsonResponse({
        'months': months,
        'booked': booked_data,
        'forecast': forecast_data,
        'year': year
    })

@login_required
def capacity_chart_data(request):
    """API endpoint for capacity chart data"""
    company = Company.objects.first()
    year = int(request.GET.get('year', datetime.now().year))
    
    # Get all team members for capacity calculation
    team_members = UserProfile.objects.filter(company=company, status='full_time')
    
    # Calculate monthly data
    months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    
    capacity_hours = []
    booked_hours = []
    projected_hours = []
    
    for month in range(1, 13):
        # Calculate total capacity for the month
        month_capacity = sum(
            float(profile.weekly_capacity_hours) * 4.33  # Average weeks per month
            for profile in team_members
        )
        capacity_hours.append(month_capacity)
        
        # Get allocations for active projects (booked)
        booked_allocations = ProjectAllocation.objects.filter(
            project__company=company,
            project__status='active',
            year=year,
            month=month
        ).aggregate(total=Sum('allocated_hours'))['total'] or 0
        booked_hours.append(float(booked_allocations))
        
        # Get allocations for active + planning projects (projected)
        projected_allocations = ProjectAllocation.objects.filter(
            project__company=company,
            project__status__in=['active', 'planning'],
            year=year,
            month=month
        ).aggregate(total=Sum('allocated_hours'))['total'] or 0
        projected_hours.append(float(projected_allocations))
    
    return JsonResponse({
        'months': months,
        'capacity_hours': capacity_hours,
        'booked_hours': booked_hours,
        'projected_hours': projected_hours,
        'year': year
    })

# Additional views for future features
def client_detail(request, client_id):
    """Client detail view"""
    company = Company.objects.first()
    client = Client.objects.get(id=client_id, company=company)
    
    # Get client's projects
    projects = Project.objects.filter(client=client).order_by('-created_at')
    
    # Get client's revenue
    revenues = MonthlyRevenue.objects.filter(
        client=client,
        year=datetime.now().year
    ).order_by('month')
    
    context = {
        'client': client,
        'projects': projects,
        'revenues': revenues,
        'company': company,
    }
    
    return render(request, 'clients/detail.html', context)

def project_detail(request, project_id):
    """Project detail view"""
    company = Company.objects.first()
    project = Project.objects.get(id=project_id, company=company)
    
    # Get project allocations
    allocations = ProjectAllocation.objects.filter(
        project=project
    ).select_related('user_profile__user').order_by('year', 'month')
    
    # Group allocations by month
    monthly_allocations = {}
    for allocation in allocations:
        month_key = f"{allocation.year}-{allocation.month:02d}"
        if month_key not in monthly_allocations:
            monthly_allocations[month_key] = []
        monthly_allocations[month_key].append(allocation)
    
    context = {
        'project': project,
        'monthly_allocations': monthly_allocations,
        'company': company,
    }
    
    return render(request, 'projects/detail.html', context)

def user_capacity(request, user_id):
    """Individual user capacity view"""
    company = Company.objects.first()
    user_profile = UserProfile.objects.get(id=user_id, company=company)
    year = int(request.GET.get('year', datetime.now().year))
    
    # Get user's allocations for the year
    allocations = ProjectAllocation.objects.filter(
        user_profile=user_profile,
        year=year
    ).select_related('project').order_by('month')
    
    # Calculate monthly utilization
    monthly_data = {}
    for month in range(1, 13):
        month_allocations = [a for a in allocations if a.month == month]
        total_allocated = sum(a.allocated_hours for a in month_allocations)
        capacity = float(user_profile.weekly_capacity_hours) * 4.33
        utilization = (total_allocated / capacity * 100) if capacity > 0 else 0
        
        monthly_data[month] = {
            'allocated_hours': total_allocated,
            'capacity_hours': capacity,
            'utilization': utilization,
            'allocations': month_allocations,
            'is_overallocated': utilization > user_profile.utilization_target
        }
    
    context = {
        'user_profile': user_profile,
        'year': year,
        'monthly_data': monthly_data,
        'company': company,
    }
    
    return render(request, 'team/capacity.html', context)

# Utility views
def health_check(request):
    """Simple health check endpoint"""
    return JsonResponse({'status': 'ok', 'timestamp': datetime.now().isoformat()})

def api_company_metrics(request):
    """API endpoint for company metrics"""
    company = Company.objects.first()
    current_year = datetime.now().year
    
    # Calculate various metrics
    metrics = {
        'total_clients': Client.objects.filter(company=company).count(),
        'active_clients': Client.objects.filter(company=company, status='active').count(),
        'total_projects': Project.objects.filter(company=company).count(),
        'active_projects': Project.objects.filter(company=company, status='active').count(),
        'team_size': UserProfile.objects.filter(company=company, status='full_time').count(),
        'year_revenue': MonthlyRevenue.objects.filter(
            company=company, 
            year=current_year, 
            revenue_type='booked'
        ).aggregate(total=Sum('revenue'))['total'] or 0,
        'year_forecast': MonthlyRevenue.objects.filter(
            company=company, 
            year=current_year, 
            revenue_type='forecast'
        ).aggregate(total=Sum('revenue'))['total'] or 0,
    }
    
    return JsonResponse(metrics)